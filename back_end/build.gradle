plugins {
    id "org.beryx.jlink" version "2.15.1"
    id "idea"
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
}

group 'project'
version loadVersion()

subprojects {
    apply plugin: 'java'

    sourceCompatibility = 11.0

    repositories {
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        mavenLocal()
        mavenCentral()
    }
}

mainClassName = 'projectapp.runtime.Main'

jar {
    archiveName 'project.jar'
    manifest {
        attributes 'Main-Class': mainClassName
    }
    exclude 'module-info.class'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

repositories {
    mavenLocal()
    mavenCentral()
}

project(':base') {
    dependencies {
    }
}

project(':lib') {
    dependencies {
        compile project(':base')
    }
}

project(':common') {
    dependencies {
        compile project(':base')
        compile project(':lib')
    }
}

project(':app') {
    apply plugin: 'org.springframework.boot' //spring boot插件
    apply plugin: 'io.spring.dependency-management' //实现maven的依赖统一管理功能

    ext {
        set('snippetsDir', file("build/generated-snippets"))
    }


    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    test {
        outputs.dir snippetsDir
        useJUnitPlatform()
    }

    asciidoctor {
        inputs.dir snippetsDir
        dependsOn test
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
        implementation 'org.springframework.boot:spring-boot-starter-quartz'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.3'
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.springframework.session:spring-session-data-redis'
        implementation 'org.mapstruct:mapstruct-processor:1.2.0.Final'
        compileOnly 'org.projectlombok:lombok'
        runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation 'org.springframework.kafka:spring-kafka-test'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
        testImplementation 'org.springframework.security:spring-security-test'

        implementation 'org.springframework.boot:spring-boot-devtools'

        compile project(':base')
        compile project(':lib')
        compile project(':common')
    }
}

dependencies {
    compile project(':app')
}

jlink {
    launcher {
        name = 'project'
    }
}

def loadVersion() {
    def PREFIX = "public static final String VERSION = \""
    def SUFFIX = "\"; // _THE_VERSION_"
    def ver = file(projectDir.getAbsolutePath() + "/base/src/main/java/projectbase/util/Version.java")
    def lines = ver.getText().split("\n")
    for (def line : lines) {
        line = line.trim()
        if (line.startsWith(PREFIX) && line.endsWith(SUFFIX)) {
            return line.substring(PREFIX.length(), line.length() - SUFFIX.length())
        }
    }
    return "unknown"
}
